module AU (
    input logic [15:0] A,
    input logic [15:0] B,
    input logic [1:0] AU_Op_Sel,
    output logic [15:0] ArithOut,
    output logic AU_Cout
);

    always_comb begin
        case (AU_Op_Sel)
            2'b00: begin
                ArithOut = A[7:0] * B[7:0];
                AU_Cout = 1'b0;
            end
            2'b01: begin
                ArithOut = A + B;
                AU_Cout = (('0 & A) + ('0 & B) > 16'hFFFF) ? 1'b1 : 1'b0;
            end
            2'b10: begin
                ArithOut = A - B;
                AU_Cout = (B > A) ? 1'b1 : 1'b0;
            end
            2'b11: begin
                ArithOut = A + 1;
                AU_Cout = (A == 16'hFFFF) ? 1'b1 : 1'b0;
            end
            default: begin
                ArithOut = 16'hXXXX;
                AU_Cout = 1'b0;
            end
        endcase
    end

endmodule
